
// const compressor = require('./compression.js');
const apiUrl = "http://celebme.duckdns.org:8181"

// ÎãÆÏùÄ ÏÖÄÎüΩ Î™©Î°ù Î≥ÄÏàò
var similarIdolData;
// ÏñºÍµ¥ Î∂ÑÏÑù Î≥ÄÏàò
var faceData;
const faceNames = {
  "1": "BTS RM",
  "2": "BTS Î∑î",
  "3": "BTS ÏßÑ",
  "4": "BTS ÏäàÍ∞Ä",
  "5": "BTS Ï†ïÍµ≠",
  "6": "BTS ÏßÄÎØº",
  "7": "BTS Ï†úÏù¥Ìôâ",
  "8": "EXO Ï≤∏",
  "9": "EXO ÎîîÏò§",
  "10": "EXO Î†àÏù¥",
  "11": "EXO Î∞±ÌòÑ",
  "12": "EXO ÏÑ∏Ìõà",
  "13": "EXO ÏàòÌò∏",
  "14": "EXO Ï∞¨Ïó¥",
  "15": "EXO Ïπ¥Ïù¥",
  "16": "EXO ÏãúÏö∞ÎØº",
  "17": "NCT Îü∞Ï•î",
  "18": "NCT ÎßàÌÅ¨",
  "19": "NCT Ïû¨ÎØº",
  "20": "NCT Ïû¨ÌòÑ",
  "21": "NCT Ï†úÎÖ∏",
  "22": "NCT ÏßÄÏÑ±",
  "23": "NCT Ï≤úÎü¨",
  "24": "NCT Ìï¥Ï∞¨",
  "25": "Í≥µÏú†",
  "26": "Í∑úÌòÑ",
  "27": "Î°úÏö¥",
  "28": "ÏÜ°Í∞ï",
  "29": "ÏòÅÌÉÅ",
  "30": "ÌÉúÏó∞",
  "31": "Í∞ïÌòúÏõê",
  "32": "Í∞ïÌò∏Îèô",
  "33": "Í≥†Ïú§Ï†ï",
  "34": "Í≥µÌö®ÏßÑ",
  "35": "ÍπÄÎÇ®Í∏∏",
  "36": "ÍπÄÎØºÏû¨",
  "37": "ÍπÄÏó∞ÏïÑ",
  "38": "ÍπÄÏú†Ï†ï",
  "39": "ÍπÄÏ¢ÖÍµ≠",
  "40": "ÍπÄÏ¢ÖÎØº",
  "41": "ÍπÄÌÉúÎ¶¨",
  "42": "ÍπÄÌòúÏàò",
  "43": "ÍπÄÌò∏Ï§ë",
  "44": "ÎÇ®Í∂ÅÎØº",
  "45": "Î•òÏ§ÄÏó¥",
  "46": "Î•òÌòÑÏßÑ",
  "47": "ÎßàÎèôÏÑù",
  "48": "Î∞ïÎÇòÎûò",
  "49": "Î∞ïÎ≥¥ÏòÅ",
  "50": "Î∞ïÏÑúÏ§Ä",
  "51": "Î∞ïÏùÄÎπà",
  "52": "Î∞ïÏßÄÏÑ±",
  "53": "Î∞ïÏßÄÌòÑ",
  "54": "Î∞ïÏßÑÏòÅ",
  "55": "Î∞∞Ïù∏ÌòÅ",
  "56": "Î∞±Ï¢ÖÏõê",
  "57": "ÎπÑÌà¨ÎπÑ",
  "58": "ÏÑúÏù∏Íµ≠",
  "59": "ÏÑúÏû•Ìõà",
  "60": "ÏÑ±ÏãúÍ≤Ω",
  "61": "ÏÜêÌù•ÎØº",
  "62": "ÏÜ°Í∞ÄÏù∏",
  "63": "ÏÜ°ÏßÄÌö®",
  "64": "ÏÜ°ÌïòÏú§",
  "65": "Ïã†ÎèôÏóΩ",
  "66": "Ïã†ÌòúÏÑ†",
  "67": "ÏïÑÏù¥Ïú†",
  "68": "Ïò§Ïú†ÏßÑ",
  "69": "Ïú†Ïó∞ÏÑù",
  "70": "Ïú†Ïû¨ÏÑù",
  "71": "Ïù¥Í∞ïÏù∏",
  "72": "Ïù¥ÎåÄÌò∏",
  "73": "Ïù¥Î≥ëÌóå",
  "74": "Ïù¥ÏÑ±ÎØº",
  "75": "Ïù¥ÏÑ∏ÏòÅ",
  "76": "Ïù¥ÏòÅÏï†",
  "77": "Ïù¥Ïù¥Í≤Ω",
  "78": "Ïù¥Ï†ïÏû¨",
  "79": "Ïù¥Ï†ïÌõÑ",
  "80": "Ïù¥Ï†úÌõà",
  "81": "Ïù¥Ï¢ÖÏÑù",
  "82": "Ïù¥Ï∞¨Ïõê",
  "83": "Ïù¥ÌïòÎä¨",
  "84": "Ïù¥Ìö®Î¶¨",
  "85": "ÏûÑÏãúÏôÑ",
  "86": "ÏûÑÏòÅÏõÖ",
  "87": "Ïû•ÎÇòÎùº",
  "88": "Ïû•ÎØºÌò∏",
  "89": "Ïû•Ïú§Ï†ï",
  "90": "Ï†ÑÌòÑÎ¨¥",
  "91": "Ï†ïÎèôÏõê",
  "92": "Ï†ïÏö∞ÏÑ±",
  "93": "Ï†ïÌï¥Ïù∏",
  "94": "Ï°∞ÏÑ∏Ìò∏",
  "95": "Ï°∞Ïù∏ÏÑ±",
  "96": "ÏßÄÏ∞ΩÏö±",
  "97": "Ï∞®ÏùÄÏö∞",
  "98": "Ï∞®ÌÉúÌòÑ",
  "99": "ÏµúÏàòÏ¢Ö",
  "100": "ÌÉÅÏû¨Ìõà",
  "101": "ÌïúÏÜåÌù¨",
  "102": "ÌïúÌö®Ï£º",
  "103": "Ìô©Ï†ïÎØº",
  "104": "Îâ¥ÏßÑÏä§ ÎØºÏßÄ",
  "105": "Îâ¥ÏßÑÏä§ ÌïòÎãà",
  "106": "Îâ¥ÏßÑÏä§ Ìï¥Î¶∞",
  "107": "Îâ¥ÏßÑÏä§ ÌòúÏù∏",
  "108": "ÎùºÏù¥Ï¶à ÏÑ±Ï∞¨",
  "109": "ÎùºÏù¥Ï¶à ÏÜåÌù¨",
  "110": "ÎùºÏù¥Ï¶à ÏäπÌïú",
  "111": "ÎùºÏù¥Ï¶à Ïï§ÌÜ§",
  "112": "ÎùºÏù¥Ï¶à ÏõêÎπà",
  "113": "ÎùºÏù¥Ï¶à ÏùÄÏÑù",
  "114": "ÏïÑÏù¥Î∏å Í∞ÄÏùÑ",
  "115": "ÏïÑÏù¥Î∏å Î†àÏù¥",
  "116": "ÏïÑÏù¥Î∏å Î¶¨Ï¶à",
  "117": "ÏïÑÏù¥Î∏å Ïù¥ÏÑú",
  "118": "ÏóêÏä§Ìåå ÎãùÎãù",
  "119": "ÏóêÏä§Ìåå ÏúàÌÑ∞",
  "120": "ÏóêÏä§Ìåå ÏßÄÏ†§",
  "121": "ÏóîÎØπÏä§ Í∑úÏßÑ",
  "122": "ÏóîÎØπÏä§ Î¶¥Î¶¨",
  "123": "ÏóîÎØπÏä§ Î∞∞Ïù¥",
  "124": "ÏóîÎØπÏä§ ÏÑ§Ïú§",
  "125": "ÏóîÎØπÏä§ ÏßÄÎãà",
  "126": "ÏóîÎØπÏä§ ÏßÄÏö∞",
  "127": "ÏóîÎØπÏä§ Ìï¥Ïõê",
  "128": "Îâ¥ÏßÑÏä§ Îã§ÎãàÏóò",
  "129": "ÎùºÏù¥Ï¶à ÏáºÌÉÄÎ°ú",
  "130": "ÏïÑÏù¥Î∏å ÏïàÏú†ÏßÑ",
  "131": "ÏïÑÏù¥Î∏å Ïû•ÏõêÏòÅ",
  "132": "ÏóêÏä§Ìåå Ïπ¥Î¶¨ÎÇò",
  "133": "Í∞ïÎã§ÎãàÏóò",
  "134": "ÎçîÎ≥¥Ïù¥Ï¶à Îâ¥",
  "135": "ÎçîÎ≥¥Ïù¥Ï¶à ÌÅê",
  "136": "ÎçîÎ≥¥Ïù¥Ï¶à ÏÉÅÏó∞",
  "137": "ÎçîÎ≥¥Ïù¥Ï¶à ÏÑ†Ïö∞",
  "138": "ÎçîÎ≥¥Ïù¥Ï¶à ÏóêÎ¶≠",
  "139": "ÎçîÎ≥¥Ïù¥Ï¶à ÏòÅÌõà",
  "140": "ÎçîÎ≥¥Ïù¥Ï¶à Ï£ºÏó∞",
  "141": "ÎçîÎ≥¥Ïù¥Ï¶à ÏºÄÎπà",
  "142": "ÎçîÎ≥¥Ïù¥Ï¶à ÌòÑÏû¨",
  "143": "Îç∞Ïù¥ÏãùÏä§ ÏÑ±ÏßÑ",
  "144": "Îç∞Ïù¥ÏãùÏä§ ÏõêÌïÑ",
  "145": "ÏÜåÎÖÄÏãúÎåÄ ÏÑúÌòÑ",
  "146": "ÏÜåÎÖÄÏãúÎåÄ ÏàòÏòÅ",
  "147": "ÏÜåÎÖÄÏãúÎåÄ Ïç®Îãà",
  "148": "ÏÜåÎÖÄÏãúÎåÄ Ïú†Î¶¨",
  "149": "ÏÜåÎÖÄÏãúÎåÄ Ìö®Ïó∞",
  "150": "Ìä∏ÏôÄÏù¥Ïä§ ÎÇòÏó∞",
  "151": "Ìä∏ÏôÄÏù¥Ïä§ Îã§ÌòÑ",
  "152": "Ìä∏ÏôÄÏù¥Ïä§ Î™®Î™®",
  "153": "Ìä∏ÏôÄÏù¥Ïä§ ÎØ∏ÎÇò",
  "154": "Ìä∏ÏôÄÏù¥Ïä§ ÏÇ¨ÎÇò",
  "155": "Ìä∏ÏôÄÏù¥Ïä§ Ï†ïÏó∞",
  "156": "Ìä∏ÏôÄÏù¥Ïä§ ÏßÄÌö®",
  "157": "Ìä∏ÏôÄÏù¥Ïä§ ÏØîÏúÑ",
  "158": "Ìä∏ÏôÄÏù¥Ïä§ Ï±ÑÏòÅ",
  "159": "ÎçîÎ≥¥Ïù¥Ï¶à Ï†úÏù¥ÏΩ•",
  "160": "ÎçîÎ≥¥Ïù¥Ï¶à Ï£ºÌïôÎÖÑ",
  "161": "Îç∞Ïù¥ÏãùÏä§ ÏòÅÏºÄÏù¥",
  "162": "Î•¥ÏÑ∏ÎùºÌïå Ïπ¥Ï¶àÌïò",
  "163": "Î•¥ÏÑ∏ÎùºÌïå ÌóàÏú§ÏßÑ",
  "164": "Î•¥ÏÑ∏ÎùºÌïå ÌôçÏùÄÏ±Ñ",
  "165": "ÏÜåÎÖÄÏãúÎåÄ Ìã∞ÌååÎãà",
  "166": "Ïó¨ÏûêÏïÑÏù¥Îì§ ÎØ∏Ïó∞",
  "167": "Ïó¨ÏûêÏïÑÏù¥Îì§ ÎØºÎãà",
  "168": "Ïó¨ÏûêÏïÑÏù¥Îì§ ÏÜåÏó∞",
  "169": "Ïó¨ÏûêÏïÑÏù¥Îì§ ÏäàÌôî",
  "170": "Ïó¨ÏûêÏïÑÏù¥Îì§ Ïö∞Í∏∞",
  "171": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à Ìïú",
  "172": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ ÎùºÎØ∏",
  "173": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ Î°úÎùº",
  "174": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ Î£®Ïπ¥",
  "175": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ ÏïÑÏÇ¨",
  "176": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ ÏïÑÌòÑ",
  "177": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à Î¶¨ÎÖ∏",
  "178": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à Î∞©Ï∞¨",
  "179": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à ÏäπÎØº",
  "180": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à Ï∞ΩÎπà",
  "181": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à ÌòÑÏßÑ",
  "182": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ ÏπòÌÇ§ÌÉÄ",
  "183": "Î≤†Ïù¥ÎπÑÎ™¨Ïä§ÌÑ∞ ÌååÎ¶¨ÌÉÄ",
  "184": "Ïä§Ìä∏Î†àÏù¥ÌÇ§Ï¶à ÌïÑÎ¶≠Ïä§",
  "185": "·Ñá·Öµ·Ñê·ÖÆ·Ñá·Öµ ·Ñã·Öµ·Ñé·Ö°·Üº·Ñâ·Ö•·Ü∏",
  "186": "·Ñâ·Ö¶·Ñá·Ö≥·Ü´·Ñê·Öµ·Ü´ ·Ñå·ÖÆ·Ü´",
  "187": "·Ñâ·Ö¶·Ñá·Ö≥·Ü´·Ñê·Öµ·Ü´ ·Ñí·Ö©·Ñâ·Öµ",
  "188": "·Ñâ·Ö¶·Ñá·Ö≥·Ü´·Ñê·Öµ·Ü´ ·ÑÜ·Öµ·Ü´·ÑÄ·Ö≤",
  "189": "·Ñâ·Ö¶·Ñá·Ö≥·Ü´·Ñê·Öµ·Ü´ ·Ñã·ÖØ·Ü´·Ñã·ÖÆ",
  "190": "·Ñâ·Ö¶·Ñá·Ö≥·Ü´·Ñê·Öµ·Ü´ ·Ñã·Ö¶·Ñâ·Ö≥·Ñè·ÖÆ·Ü∏·Ñâ·Ö≥",
  "191": "·Ñá·Ö≥·ÜØ·ÑÖ·Ö¢·Ü®·Ñë·Öµ·Üº·Ñè·Ö≥ ·ÑÖ·Ö©·Ñå·Ö¶",
  "192": "·Ñá·Ö≥·ÜØ·ÑÖ·Ö¢·Ü®·Ñë·Öµ·Üº·Ñè·Ö≥ ·ÑÖ·Öµ·Ñâ·Ö°",
  "193": "·Ñá·Ö≥·ÜØ·ÑÖ·Ö¢·Ü®·Ñë·Öµ·Üº·Ñè·Ö≥ ·Ñå·Ö¶·ÑÇ·Öµ",
  "194": "·Ñá·Ö≥·ÜØ·ÑÖ·Ö¢·Ü®·Ñë·Öµ·Üº·Ñè·Ö≥ ·Ñå·Öµ·Ñâ·ÖÆ"
}

var resultMeta = {
  "man": "ÎÇ®Ïûê",
  "woman": "Ïó¨Ïûê",
  "angry": "ÌôîÎÇ®üò°",
  "disgust": "Ïã´Ïñ¥Ìï®üò±",
  "fear": "ÎëêÎ†§ÏõÄüò®",
  "happy": "ÌñâÎ≥µÌï®ü•≥",
  "neutral": "Î¨¥ÌëúÏ†ïüôÇ",
  "sad": "Ïä¨Ìîîüò≠",
  "surprise": "ÎÜÄÎûåüò≥",
  "asian": "ÏïÑÏãúÏïÑÏù∏",
  "black": "ÌùëÏù∏",
  "indian": "Ïù∏ÎèÑÏù∏",
  "latino hispanic": "ÎùºÌã¥ Í≥ÑÏó¥ ÎØ∏Íµ≠Ïù∏",
  "middle eastern": "Ï§ëÎèôÏù∏",
  "white": "Î∞±Ïù∏",
}

function getMeta(name) {

  try {
    return resultMeta[name.toLowerCase()];

  } catch (error) {
    console.log(error);
    return name;
  }

}


const jsonContainer = document.getElementById('json-container');
const toggleButton = document.getElementById('toggleButton');
const jsonKeys = Object.keys(faceNames);
jsonKeys.forEach(key => {
  const keyValueContainer = document.createElement('div');
  const keyElement = document.createElement('span');
  const valueElement = document.createElement('span');

  keyElement.classList.add('json-key');
  valueElement.classList.add('json-string');

  keyElement.textContent = `"${key}": `;
  valueElement.textContent = `"${faceNames[key]}"`;

  keyValueContainer.appendChild(keyElement);
  keyValueContainer.appendChild(valueElement);

  jsonContainer.appendChild(keyValueContainer);
});

function toggleCelebList() {
  const x = jsonContainer;
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
// toggleButton.addEventListener('click', function () {
  
// });
$(".result-message").hide();



function cropImage(imgElement, callback, maxWidth = 512, maxHeight = 512) {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const img = imgElement;

  const aspectRatio = img.naturalWidth / img.naturalHeight;
  let newWidth = maxWidth;
  let newHeight = maxHeight;

  if (aspectRatio > 1) {
    newHeight = Math.min(maxHeight, img.naturalHeight);
    newWidth = newHeight * aspectRatio;
  } else {
    newWidth = Math.min(maxWidth, img.naturalWidth);
    newHeight = newWidth / aspectRatio;
  }

  canvas.width = maxWidth;
  canvas.height = maxHeight;
  ctx.drawImage(img, (maxWidth - newWidth) / 2, (maxHeight - newHeight) / 2, newWidth, newHeight);

  canvas.toBlob(function (blob) {
    callback(blob);
  }, 'image/webp');
}

var ageChart, emotionChart, genderChart, raceChart;
function drawChart(userData) {

  const autocolors = window['chartjs-plugin-autocolors'];


  Chart.register(autocolors);
  Chart.defaults.font.size = 14;
  // Chart.register(ChartDataLabels);
  $("#face-analysis-result").html(
    "ÏÇ¨ÏßÑ ÏÜç ÏñºÍµ¥ÏùÄ " + getMeta(userData.dominant_race) + ", <br/>" 
    + "ÎÇòÏù¥ " + userData.age + " ÏÑ∏ " + getMeta(userData.dominant_gender) + ", "
    + getMeta(userData.dominant_emotion) + " ÏúºÎ°ú Î≥¥ÏûÖÎãàÎã§.<br/>"

    
  )

  const ageData = {
    labels: ["ÎÇòÏù¥"],
    datasets: [{
      label: 'ÎÇòÏù¥',
      data: [userData.age],
      backgroundColor: ['#11BB84']
    }]
  };
  if (ageChart != null) {
    ageChart.destroy();
  }
  ageChart = new Chart(document.getElementById('ageChart'), {
    type: 'bar',
    data: ageData,
    plugins: [ChartDataLabels],
    options: {
      maintainAspectRatio: false,
      // indexAxis: 'y',
      plugins: {
        // autocolors: {
        //   mode: 'label'
        // },
        legend: {
          display: false,
        }
      }
    }
  });


  console.log(Object.keys(userData.gender));
  console.log(Object.keys(userData.gender).flatMap(value => { return getMeta(value); }));
  // Display gender in pie chart
  const genderData = {
    labels: Object.keys(userData.gender).flatMap(value => {
      return getMeta(value);
    }),
    datasets: [{
      label: 'ÏÑ±Î≥Ñ',
      maintainAspectRatio: false,
      data: Object.values(userData.gender),
      backgroundColor: ['#36A2EB', '#FF6384']
    }]
  };

  if (genderChart != null) {
    genderChart.destroy();
  }
  genderChart = new Chart(document.getElementById('genderChart'), {
    type: 'bar',
    data: genderData,
    plugins: [ChartDataLabels],
    options: {
      maintainAspectRatio: false,
      plugins: {
        autocolors: {
          mode: 'data'
        },
        datalabels: {
          formatter: function (value, context) {
            console.log(value);//context.chart.data.labels[context.dataIndex]
            return value.toFixed(1);
          }
        },
        legend: {
          display: false,
        }
      },
    }
  });

  // Display emotion in radar chart
  const emotionData = {
    labels: Object.keys(userData.emotion).flatMap(value => {
      return getMeta(value);
    }),
    datasets: [{
      label: 'Í∞êÏ†ï',
      data: Object.values(userData.emotion),
      hoverOffset: 50,
      borderWidth: 0,
      backgroundColor: [
        'rgb(255, 99, 132)',
        'rgb(125, 99, 132)',
        'rgb(54, 162, 235)',
        'rgb(54, 162, 135)',
        'rgb(255, 205, 86)',
        'rgb(125, 125, 86)',
        'rgb(225, 125, 86)',
      ],
      circumference: 180,
      rotation: 90
    }],
    
  };

  if (emotionChart != null) {
    emotionChart.destroy();
  }
  emotionChart = new Chart(document.getElementById('emotionChart'), {
    type: 'doughnut',
    data: emotionData,
    options: {
      indexAxis: 'y',
      maintainAspectRatio: false,
      plugins: {
        autocolors: {
          mode: 'data'
        },
        datalabels: {
          formatter: function (value, context) {
            console.log(value); //context.chart.data.labels[context.dataIndex]
            return context.chart.data.labels[context.dataIndex] + ": " + value.toFixed(1);
          }
        },
        legend: {
          display: true,
          position: 'bottom'
        }
      },
    }
  });

  // Display race in radar chart
  const raceData = {
    labels: Object.keys(userData.race).flatMap(value => {
      return getMeta(value);
    }),
    datasets: [{
      label: 'Ïù∏Ï¢Ö',
      data: Object.values(userData.race),
      hoverOffset: 50,
      borderWidth: 0,
      backgroundColor: [
        'rgb(255, 99, 132)',
        'rgb(125, 99, 132)',
        'rgb(54, 162, 235)',
        'rgb(54, 162, 135)',
        'rgb(255, 205, 86)',
        'rgb(125, 125, 86)'
      ],
      circumference: 180,
      rotation: -90
    }]
  };
  if (raceChart != null) {
    raceChart.destroy();
  }
  raceChart = new Chart(document.getElementById('raceChart'), {
    type: 'doughnut',
    data: raceData,
    options: {
      // indexAxis: 'y',
      maintainAspectRatio: false,
      plugins: {
        
        autocolors: {
          mode: 'data'
        },
        datalabels: {
          formatter: function (value, context) {
            console.log(value);//context.chart.data.labels[context.dataIndex]
            return  context.chart.data.labels[context.dataIndex] + ": " + value.toFixed(1);
          }
        },
        legend: {
          display: true
        }
      },

    }
  });
}

async function analyzeFace(inputImage) {
  const formData = new FormData();
  formData.append("img", inputImage); // Adjust file type as needed
  return await fetch(apiUrl + '/analyze', {
    method: 'POST',
    body: formData
  })
    .then(response => response.json())
    .then(data => {
      // Handle the response data here
      console.log("analyze");
      console.log(data);
      faceData = data;
      drawChart(data);

    })
    .catch(error => {
      // Handle errors here
      console.error('Error:', error);
    });

}


async function getSimilarCeleb(inputImage) {
  const formData = new FormData();
  formData.append("img", inputImage); // Adjust file type as needed

  return await fetch(apiUrl + '/find', {
    method: 'POST',
    body: formData
  })
    .then(response => response.json())
    .then(data => {
      // Handle the response data here
      console.log(data);
      similarIdolData = data;
      for (var rank = 0; rank < 10; rank++) {
        similarIdolData[rank].identity = faceNames[similarIdolData[rank].identity];
      }
      displayIdolPredictionBriefly(data);
      // displayIdolPrediction(1);
      
      updateKakaoLink();
      $(".try-again-btn").show();
      $(".result-message").show();
      $("#loading").hide();
      // window.history.replaceState({}, document.title, "/");
      $("html, body").scrollTop(
        document.getElementsByClassName("title")[0].offsetTop
      );

    })
    .catch(error => {
      // Handle errors here
      console.error('Error:', error);
    });

}
function displayIdolPredictionBriefly(data) {
  $("#result-similar-idol").show();
  for (var rank = 1; rank <= 10; rank++) {
    try {
      const r = data[rank - 1].identity ; // .split("/")[1]]
     
      // $('#fr' + rank).html(r+ ": " +  ((1 - data[rank - 1].distance) * 100).toFixed(1) + "%");
      $('#r' + rank).html(r + ": " + ((1 - data[rank - 1].distance) * 100).toFixed(1) + "% üîç");

      $('#search' + rank).hide();
      // $('#s' + rank).show();
      if (rank == 1) {
        displayIdolPrediction(1);
        $('#celeb-result').html("ÏÇ¨ÏßÑ ÏÜç ÏñºÍµ¥Ïù¥ " + r + " ÏùÑ(Î•º) Í∞ÄÏû• ÎãÆÏïòÏñ¥Ïöî." + "<br/><br/>"
        // + "ÏÖÄÎüΩ Ïù¥Î¶ÑÏùÑ ÎàåÎü¨ÏÑú Ïù¥ÎØ∏ÏßÄÎ•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî. <br/><br/>" 
        )
      }
    } catch (error) {
      console.log(error);
    }
  }


}

function displayIdolPrediction(rank) {
  data = similarIdolData;

  // console.log(data);
  const r = data[rank - 1].identity; // .split("/")[1]];
  try {
    if ($('#search' + rank).is(":visible")) {
      $('#search' + rank).hide();
      $('#r' + rank).html(r + ": " + ((1 - data[rank - 1].distance) * 100).toFixed(1) + "% üîç");
    }
    else {
      
      console.log(r);
      q = 'allintitle:"' + r + '"';

      var element = google.search.cse.element.getElement('q' + rank);
      element.execute(q);
      $('#search' + rank).show();
      $('#r' + rank).html(r + ": " + ((1 - data[rank - 1].distance) * 100).toFixed(1) + "% _");
      
      // window.history.replaceState({}, document.title, "/");
      window.history.replaceState({}, document.title, getBaseUrl());

      gtag("event", "similar_idol_result", {
        celeb: r.replaceAll(" ", ""),
        rank: rank
      });
      gtag("event", r.replaceAll(" ", ""), {
        event_category: "similar_idol_result",
        rank: rank,
        result_face: true,
      });
    }

  } catch (error) {
    console.log(error);
  }


}

/**
  Displays Similar idol name from model prediction
*/
// async function predict() {

//   displayIdolPrediction(valuesArr, namesArr);
// }

async function loadImage(url, elem) {
  return new Promise(function (resolve, reject) {
    elem.onload = function () {
      resolve(elem);
    };
    elem.src = url;
  });
}
async function readURL(input) {
  if (input.files && input.files[0]) {
    $(".try-again-btn").hide();

    gtag("event", "AIÌò∏Ï∂úÏãúÏûë", {
      event_category: "AIÌò∏Ï∂úÏãúÏûë",
    });
    var reader = new FileReader();
    reader.onload = function (e) {
      $(".image-upload-wrap").hide();
      var imgData = e.target.result;
      $("#face-image").attr("src", imgData);
      $("#title").html(input.files[0].name);
    };
    await reader.readAsDataURL(input.files[0]);
    $(".file-upload-content").show();
    $("#loading-message").html("ÏñºÍµ¥ÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏûàÏñ¥Ïöî.")
    $("#loading").show();
    $(".result-message").hide();
    $("#result-similar-idol").hide();
    document.getElementById("face-image").onload = function (e) {
      var imgData = document.getElementById("face-image");
      cropImage(imgData, function (resizedImg) {
        analyzeFace(resizedImg).then(function () {
          $("#loading-message").html("ÎãÆÏùÄ ÏïÑÏù¥ÎèåÏùÑ Ï∞æÍ≥† ÏûàÏñ¥Ïöî.")
          getSimilarCeleb(resizedImg);
        })


      })

      // predict().then(function (prom) {

      //     });

    };
  } else {
    removeUpload();
  }
}

function removeUpload() {
  document.getElementsByClassName("file-upload-input")[0].value = "";
  $(".file-upload-input").replaceWith($(".file-upload-input").clone());
  $("#face-image").value = "";
  $("#face-image").replaceWith($("#face-image").clone());
  $(".file-upload-content").hide();
  $(".image-upload-wrap").show();
  $(".result-message").hide();

  window.location.href = getBaseUrl();
  // document.getElementById("search").height = 0;
  $("html, body").scrollTop(
    document.getElementsByClassName("title")[0].offsetTop
  );
}
$(".image-upload-wrap").bind("dragover", function () {
  $(".image-upload-wrap").addClass("image-dropping");
});
$(".image-upload-wrap").bind("dragleave", function () {
  $(".image-upload-wrap").removeClass("image-dropping");
});

function iosApp() {
  document.getElementById("addThis").style.display = "none";
  document.getElementById("disqus_thread").style.display = "none";
  var kakao = document.getElementsByClassName("kakao_ad_area");
  for (var i = 0; i < kakao.length; i++) {
    if (kakao[i]) {
      kakao[i].style.display = "none";
    }
  }
  document.getElementById("yotube-top-link").style.display = "none";
}


// function arrayToQueryString(array) {
//   return array.map(item => encodeURIComponent(item)).join('&');
// }

async function copyToClipboard(textToCopy) {
  // Navigator clipboard api needs a secure context (https)
  if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(textToCopy);
  } else {
      // Use the 'out of viewport hidden text area' trick
      const textArea = document.createElement("textarea");
      textArea.value = textToCopy;
          
      // Move textarea out of the viewport so it's not visible
      textArea.style.position = "absolute";
      textArea.style.left = "-999999px";
          
      document.body.prepend(textArea);
      textArea.select();

      try {
          document.execCommand('copy');
      } catch (error) {
          console.error(error);
      } finally {
          textArea.remove();
      }
  }
}



function getUriComponents() {
  if (similarIdolData && faceData) {
    const simStr = encodeURI(encodeURIComponent(JSON.stringify(similarIdolData)));
    const faceStr = encodeURI(encodeURIComponent(JSON.stringify(faceData)));
    $('#modalMessage').html("Í≤∞Í≥ºÎ•º Ìè¨Ìï®Ìïú ÎßÅÌÅ¨Î•º Î≥µÏÇ¨ÌñàÏñ¥Ïöî.");
    return "?result=" + simStr + "&face=" + faceStr;
  }
  $('#modalMessage').html("ÎßÅÌÅ¨Î•º Î≥µÏÇ¨ÌñàÏñ¥Ïöî.");
  return "";
}

function getBaseUrl() {
  console.log(window.location.href.split("?"));
  var name = window.location.href.split("?")[0];
  name = name.split("#")[0];
  console.log(name);
  return name;
}

function getIndexParamsUrl() {
  var linkUrl = getBaseUrl();
  linkUrl = linkUrl.split("/").pop();
  return linkUrl + getUriComponents();
}

function getShareUrl() {
  var linkUrl = getBaseUrl();
  return linkUrl + getUriComponents();
}

async function shareUrl() {
  
  const linkUrl = getShareUrl();
  try {
    await copyToClipboard(linkUrl);
    console.log('url copied to the clipboard.');
    $('#modalMessage').fadeIn();
    setTimeout(function() {
        $('#modalMessage').fadeOut();
    }, 3000); // 3000 milliseconds = 3 seconds
    
  } catch(error) {
    console.error("copy to clipboard error.");
  }
    
}

function showResults(resultParam, faceParam) {
  $(".image-upload-wrap").hide();
  $("#face-image").attr("src", "https://play-lh.googleusercontent.com/IidzGfx6ICCRnHqGsQYOoyyVcqNnF4sLZTycK5y0fQ0gUhTpd23KwNNgE3c403wkR1s=s128-rw");
  $(".file-upload-content").show();
  const resultDecoded = decodeURI(decodeURIComponent(resultParam));
  const resultJson = JSON.parse(resultDecoded.split("#")[0]);
  similarIdolData = resultJson;

  const faceDecoded = decodeURI(decodeURIComponent(faceParam));
  const faceJson = JSON.parse(faceDecoded.split("#")[0]);
  faceData = faceJson;
  console.log(faceData);
  
  var int=setInterval(function() {
    if (typeof google != 'undefined' && google.search.cse) {
      // google.search.cse.element.getElement('ap_search').execute("#{@term}")  
      

      drawChart(faceData);
      displayIdolPredictionBriefly(similarIdolData);
      const name = getBaseUrl()
      window.history.replaceState({}, document.title, name);
      clearInterval(int);
      
    }
  }, 200)

  

  $(".try-again-btn").show();
  $(".result-message").show();
  // window.location.href = window.location.pathname + "?q1=" + faceNames[similarIdolData[0].identity];
  // displayIdolPrediction(1);
}


// {{ result ÏøºÎ¶¨ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Ï°¥Ïû¨Ìï† Îïê Î∞îÎ°ú Í≤∞Í≥ºÌëúÏãú ÏãúÏûë

// Ïπ¥Ïπ¥Ïò§ Í≥µÏú†
// Function to get URL parameter by name
function getUrlParameter(name) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(name);
}

Kakao.init('8b998f0abc3beae40dc620c58067dd55');

function updateKakaoLink() {
  
  Kakao.Share.createCustomButton({
    container: '#shareKt1',
    templateId: 104987, // ÎÇòÏùò Ïï± ID ÏûëÏÑ±
    templateArgs: {
        'result_url': getIndexParamsUrl(),    // encoded url
        'result': similarIdolData[0].identity  + ": " + ((1 - similarIdolData[0].distance) * 100).toFixed(1) + "%"
        ,    // result text 'ÏóêÏä§Ìåå ÎãùÎãù: 56%'
    }
});
}
// Get the value of the 'result' parameter
const resultParam = getUrlParameter('result');   // resultParam: 'key:value' ÌòïÌÉú ex. 'ÏóêÏä§Ìåå ÎãùÎãù: 56%' Î°ú Ìï†ÏàòÎèÑ ÏûàÎäîÎç∞, encode Î°ú 10Î™Ö Í≤∞Í≥ºÎ•º Îã¥Ïûê.
const faceParam = getUrlParameter('face');
// Replace content based on the value of 'result' parameter
if (resultParam != null) {

    showResults(resultParam, faceParam);  // Íµ¨ÌòÑÌïÑÏöî
    
} else {
    
}
Kakao.Share.createCustomButton({
  container: '#shareKt1',
  templateId: 104987, // ÎÇòÏùò Ïï± ID ÏûëÏÑ±
});

// }} result ÏøºÎ¶¨ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Ï°¥Ïû¨Ìï† Îïê Î∞îÎ°ú Í≤∞Í≥ºÌëúÏãú ÎÅù